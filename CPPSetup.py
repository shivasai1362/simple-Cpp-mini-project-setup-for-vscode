from flask import Flask, render_template, request, jsonify
import json
import os

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        project_path = request.form['project_path']
        compiler_path = request.form['compiler_path']
        include_paths = request.form['include_paths'].split('\n')
        library_paths = request.form['library_paths'].split('\n')
        libraries = request.form['libraries'].split()

        # Create tasks.json
        tasks_json = {
            "tasks": [
                {
                    "type": "cppbuild",
                    "label": "C/C++: g++.exe build active file",
                    "command": compiler_path,
                    "args": [
                        "-fdiagnostics-color=always",
                        "-g",
                        "${file}",
                        "-o",
                        "${fileDirname}\\${fileBasenameNoExtension}.exe"
                    ] + [f"-I{path.strip()}" for path in include_paths if path.strip()] +
                    [f"-L{path.strip()}" for path in library_paths if path.strip()] +
                    [f"-l{lib}" for lib in libraries],
                    "options": {"cwd": "${workspaceFolder}"},
                    "problemMatcher": ["$gcc"],
                    "group": {"kind": "build", "isDefault": True},
                    "detail": "Task generated by CPP Setup."
                }
            ],
            "version": "2.0.0"
        }

        # Create c_cpp_properties.json
        cpp_properties = {
            "configurations": [
                {
                    "name": "Win32",
                    "includePath": ["${default}"] + [path.strip() for path in include_paths if path.strip()],
                    "defines": ["_DEBUG", "UNICODE", "_UNICODE"],
                    "cStandard": "c17",
                    "cppStandard": "gnu++17",
                    "intelliSenseMode": "windows-gcc-x86"
                }
            ],
            "version": 4
        }

        
        vscode_dir = os.path.join(project_path, '.vscode')
        os.makedirs(vscode_dir, exist_ok=True)

        
        with open(os.path.join(vscode_dir, 'tasks.json'), 'w') as f:
            json.dump(tasks_json, f, indent=4)

        with open(os.path.join(vscode_dir, 'c_cpp_properties.json'), 'w') as f:
            json.dump(cpp_properties, f, indent=4)

        return "Project setup completed successfully. Remember C++ extension must be installed in VSCode."

    return render_template('index.html')

@app.route('/preview', methods=['POST'])
def preview():
    project_path = request.form['project_path']
    compiler_path = request.form['compiler_path']
    include_paths = request.form['include_paths'].split('\n')
    library_paths = request.form['library_paths'].split('\n')
    libraries = request.form['libraries'].split()

    tasks_json = {
        "tasks": [
            {
                "type": "cppbuild",
                "label": "C/C++: g++.exe build active file",
                "command": compiler_path,
                "args": [
                    "-fdiagnostics-color=always",
                    "-g",
                    "${file}",
                    "-o",
                    "${fileDirname}\\${fileBasenameNoExtension}.exe"
                ] + [f"-I{path.strip()}" for path in include_paths if path.strip()] +
                [f"-L{path.strip()}" for path in library_paths if path.strip()] +
                [f"-l{lib}" for lib in libraries],
                "options": {"cwd": "${workspaceFolder}"},
                "problemMatcher": ["$gcc"],
                "group": {"kind": "build", "isDefault": True},
                "detail": "Task generated by CPP Setup."
            }
        ],
        "version": "2.0.0"
    }

    cpp_properties = {
        "configurations": [
            {
                "name": "Win32",
                "includePath": ["${default}"] + [path.strip() for path in include_paths if path.strip()],
                "defines": ["_DEBUG", "UNICODE", "_UNICODE"],
                "cStandard": "c17",
                "cppStandard": "gnu++17",
                "intelliSenseMode": "windows-gcc-x86"
            }
        ],
        "version": 4
    }

    return jsonify({
        "tasks": tasks_json,
        "properties": cpp_properties
    })

if __name__ == '__main__':
    app.run(debug=True)
